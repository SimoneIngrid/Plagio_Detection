import glob, os
from os.path import isfile
import errno
import re
from re import sub
from collections import defaultdict

def contARCHIVES(): #contador de arquivos
    cont = 0
    os.chdir(r"C:\Users\simon\algorithmJAVA")
    for file in glob.glob("*.txt"):
        cont += 1
    return cont

def namesARCHIVES(): #cria dict c/ name arquivos
    listNames = []
    archivesNames = {}
    os.chdir(r"C:\Users\simon\algorithmJAVA")
    for file in glob.glob("*.txt"):
        listNames.append(file)
    for i in listNames:
        archivesNames[i] = None
    return archivesNames

def removeEMPTYLINES(s): #remove linhas vazias do código
    filtered = filter(lambda x: not re.match(r'^\s*$', x), s)
    frases = []
    for i in filtered:
        frases.append(i)
    return frases

def imprimeARCHIVOCABU(dictARCHIVES):
    for i,j in dictARCHIVES.items():
        print(i, "->", j)
        print("Size of vocab: ", len(j))
        print()

def prePROCESSAM(texto):
    texto = texto.replace(" ", " AB ")
    texto = sub('".*?"', '" "',texto)
    texto = sub("'.*?'", "''",texto)
    texto = re.sub(r'//.*', '//',texto)#comments in cpp
    return texto

def functionTOKENS(text):
    tableTOKENSSIMBOLS = [#table com todos os tokens
        'ab', 'de', 'fe','aa', 'ad', 'ae', 'af', 'ag', 'ah', 'ai', 'aj', 'ak', 'al', 'ap',
        'am', 'an', 'ao', 'ap', 'aq', 'ar', 'as', 'at', 'au', 'aw', 'az', 'am', 'an', 'ir',
        'ip'
       
        'pa', 'pb', 'pc', 'pd', 'pe', 'pf','pg','ph', 'pi', 'pj',
        'pk','pl','pm', 'pn', 'po','pp','pq','pr','ps', 'pt',
        'pz','qa','qb','qc','qd','pu','pv','px',
        
        'qe','qf','qg','gh','qi', 'gj', 'qk' ,'ql', 'qm', 'qn',
        'qo', 'qp','qq','qr','qs','qt', 'qu', 'qv', 'qx', 'qz',
        
        'ra','rb','rc','rd','re', 'rf', 'rg','rh','ri',
        'rj', 'rk', 'rl', 'rm','rn', 'ro', 'rp', 'rq',
        'rr' ,'rs','rt','ru','rv','rx','rz',
        
        'sa','sb', 'sc','sd','se', 'sf', 'sg', 'sh', 'si',
        'sj', 'sk', 'sl', 'sm', 'sn', 'so', 'sq' ,'sr', 'ss',
        'st', 'su', 'sv', 'sx', 'sw', 'sz', 'ta', 'tb', 'tc', 'td','te',  'tf'
       ]
    #replace os símbolos pelos seus respectivos tokens
    text = text.replace("::", " tg ")
    text = text.replace(";", " ip ")
    text = text.replace("&&", " ob ")
    text = text.replace("||", " oc ")
    text = text.replace("<<", " js ")
    text = text.replace("/*", " ir ")
    text = text.replace("*/", " is ")
    text = text.replace("//", " jt ")
    text = text.replace("++", " it ")
    text = text.replace("--", " iu ")
    text = text.replace(":", " aa ")
    text = text.replace("&", " iq ")
    text = text.replace("(", " ad ")
    text = text.replace(")", " ae ")
    text = text.replace("[", " af ")
    text = text.replace("]", " ag ")
    text = text.replace('"', " ah ")
    text = text.replace("'", " ai ")
    text = text.replace("*", " aj ")
    text = text.replace("-", " ak ")
    text = text.replace("+", " al ")
    text = text.replace("%", " am ")
    text = text.replace("!", " an ")
    text = text.replace(".", " ao ")
    text = text.replace("/", " ap ")
    text = text.replace("#", " aq ")
    text = text.replace("=", " ar ")
    text = text.replace(">", " as ")
    text = text.replace("<", " at ")
    text = text.replace(",", " au ")
    text = text.replace("}", " aw ")
    text = text.replace("{", " az ")
   
    stringSPLIT = text.lower() #mantém os tokens minúsculos
    stringSPLIT = stringSPLIT.split()#divide o code em palavras em lista
       
    tableTOKENS = {#words reservadas e seus respec tokens
        'io': 'pa','swing': 'pb','math': 'pc','abstract': 'pd','assert': 'pe',
        'boolean': 'pf','break':'pg','byte':'ph', 'case':'pi', 'catch':'pj',
        'char':'pk','class':'pl','const':'pm',
        'continue':'pn','default': 'po','do':'pp',
        'double':'pq','else':'pr','enum':'ps','extends':'pt',
        'float':'pz','for':'qa','goto':'qb','if':'qc','implements':'qd',
        'false':'pu','final':'pv','finally':'px',
        
        'import': 'qe','instanceof': 'qf','int':'qg','interface':'gh',
        'long':'qi', 'native':'gj', 'new':'qk' ,'null':'ql', 'package':'qm', 'private':'qn',
        'protected':'qo', 'public':'qp' ,'return': 'qq','short':'qr','static': 'qs',
        'strictfp': 'qt', 'super':'qu', 'switch':'qv', 'synchronized':'qx', 'this':'qz',
        
        'throw':'ra','throws':'rb','transient':'rc','true':'rd',
        'try':'re', 'void':'rf', 'volatile':'rg','whileisDigit':'rh','isLetter':'ri',
        'toLowerCase':'rj', 'toUpperCase':'rk', 'trim':'rl', 'replace': 'rm',
        'split': 'rn','valueOf': 'ro','random': 'rp','println': 'rq',
        'System':'rr' ,'out': 'rs','pow':'rt','exp':'ru','log':'rv','sqrt':'rx','max': 'rz',
        
        'min':'sa','floor':'sb', 'ceil':'sc','round':'sd',
        'nextLine':'se', 'nextInt':'sf', 'nextDouble':'sg', 'hasNext':'sh', 'hasNextLine':'si',
        'hasNextInt':'sj', 'hasNextDouble':'sk', 'close':'sl', 'Random':'sm', 'compareTo':'sn',
        'length':'so', 'equals':'sq' ,'equalsIgnoreCase': 'sr', 'startsWith':'ss',
        'contains': 'st', 'indexOf':'su', 'lastIndexOf':'sv','charAt':'sx', 
        'substring':'sw', 'awt':'sz', 'args':'ta', 'String': 'tb', 'Main':'tc', 'main':'td',
        'Scanner': 'te', 'util': 'tf'}
    
    for n, i in enumerate(stringSPLIT): #busca o token da palavra reservada
        for x, y in tableTOKENS.items():
            if i == x:
                stringSPLIT[n] = y
    for n, i in enumerate(stringSPLIT): #remove itens q ñ possuem tokens(clean)
        if i not in tableTOKENSSIMBOLS:
            stringSPLIT.remove(i)
    return stringSPLIT

def calcNgram(listapalavras, n):#calcula as n-gramas dos tokens gerados
    ngrams = []
    vocabulario = []
    for i in range(len(listapalavras)-(n-1)):
        ngrams.append(listapalavras[i:i+n])
    for n, i in enumerate(ngrams):
        auxi = "".join(str(x) for x in i)
        vocabulario.append(auxi)
    return vocabulario

def imprimeDICT(structDICT):
    for i, j in structDICT.items():
        print(i, " -> ", j)
#         print("Size of ", len(j))
        print()

def removeREPEATED(vocaburepetido): 
	final_vocabu = [] 
	for num in vocaburepetido: 
		if num not in final_vocabu: 
			final_vocabu.append(num) 
	return final_vocabu

def listaINVERTIDA(listaARQUIVOS, vocabuarioFINAL):
    #arquivos e seus vocabu e vocabulário completo
    cont = 0
    listaINVERTIDA = {}
    newdict = defaultdict(list)
    for i in vocabuarioFINAL:
        listaINVERTIDA[i] = []
    print()
    print("-- Lista Invertida --")

    for i in vocabuarioFINAL:
        for k, x in listaARQUIVOS.items():
            addlist = []
            if i in x:
                cont = 0
                cont = x.count(i)
                addlist.append(k)
                addlist.append(cont)
                listaINVERTIDA[i].append(addlist)
    print()
    print("Lista Invertida preenchida")
    imprimeDICT(listaINVERTIDA)
  

# -------------PROGRAMA PRINCIPAL---------------
arquivos = []
vocabulario = []
vocabularioFINAL = []
qtdeArqu = 0
tam = 0
qtdeARQUIVES = contARCHIVES()#qtde de arquivos da pasta
dictARCHIVES = namesARCHIVES()#nome dos arquivos da pasta

for file in glob.glob("*.txt"):
    qtdeArqu += 1
    print("-----------------CÓDIGO JAVA", qtdeArqu, "--------------")
    fp = open(file, "r", -1, 'utf-8')
    codeTEXT = fp.readlines()
    print("Nome do arquivo atual-> ", file)
    texto = removeEMPTYLINES(codeTEXT)
    stringTEXT = "".join(str(x) for x in texto)
    stringTEXT = re.sub('(?<=\/\*)[\s\S]*?(?=\*\/)', '', stringTEXT)
    stringTEXT = prePROCESSAM(stringTEXT)
    print("----> TOKENIZE <----")
    stringTEXT = functionTOKENS(stringTEXT)
    print("Qtde de tokens: ",len(stringTEXT),": ", stringTEXT)
    print()
    print("----> N-GRAMS N=5 <----")
    stringTEXT = calcNgram(stringTEXT, 5)
    print(stringTEXT)
    print()
    tam += len(stringTEXT)
    vocabularioFINAL += stringTEXT
    dictARCHIVES[file] = stringTEXT
   
vocabularioFINAL = removeREPEATED(vocabularioFINAL)
print()
print("----- CRIAÇÃO DA LISTA INVERTIDA ----")
listaINVERTIDA(dictARCHIVES, vocabularioFINAL)
